{"version":3,"sources":["visitor/set.ts"],"names":[],"mappings":"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","file":"set.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"]}