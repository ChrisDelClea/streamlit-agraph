{"version":3,"sources":["io/node/reader.ts"],"names":[],"mappings":"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","file":"reader.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Duplex, DuplexOptions } from 'stream';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughNodeStream<T extends { [key: string]: DataType } = any>(options?: DuplexOptions & { autoDestroy: boolean }) {\n    return new RecordBatchReaderDuplex<T>(options);\n}\n\n/** @ignore */\ntype CB = (error?: Error | null | undefined) => void;\n\n/** @ignore */\nclass RecordBatchReaderDuplex<T extends { [key: string]: DataType } = any> extends Duplex {\n    private _pulling: boolean = false;\n    private _autoDestroy: boolean = true;\n    private _reader: RecordBatchReader | null;\n    private _asyncQueue: AsyncByteQueue | null;\n    constructor(options?: DuplexOptions & { autoDestroy: boolean }) {\n        super({ allowHalfOpen: false, ...options, readableObjectMode: true, writableObjectMode: false });\n        this._reader = null;\n        this._pulling = false;\n        this._asyncQueue = new AsyncByteQueue();\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n    _final(cb?: CB) {\n        const aq = this._asyncQueue;\n        aq && aq.close();\n        cb && cb();\n    }\n    _write(x: any, _: string, cb: CB) {\n        const aq = this._asyncQueue;\n        aq && aq.write(x);\n        cb && cb();\n        return true;\n    }\n    _read(size: number) {\n        const aq = this._asyncQueue;\n        if (aq && !this._pulling && (this._pulling = true)) {\n            (async () => {\n                if (!this._reader) {\n                    this._reader = await this._open(aq);\n                }\n                this._pulling = await this._pull(size, this._reader);\n            })();\n        }\n    }\n    _destroy(err: Error | null, cb: (error: Error | null) => void) {\n        const aq = this._asyncQueue;\n        if (aq) { err ? aq.abort(err) : aq.close(); }\n        cb(this._asyncQueue = this._reader = null);\n    }\n    async _open(source: AsyncByteQueue) {\n        return await (await RecordBatchReader.from<T>(source)).open({ autoDestroy: this._autoDestroy });\n    }\n    async _pull(size: number, reader: RecordBatchReader<T>) {\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (this.readable && !(r = await reader.next()).done) {\n            if (!this.push(r.value) || (size != null && --size <= 0)) { break; }\n        }\n        if (!this.readable || (r && r.done && (reader.autoDestroy || (await reader.reset().open()).closed))) {\n            this.push(null);\n            await reader.cancel();\n        }\n        return !this.readable;\n    }\n}\n"]}