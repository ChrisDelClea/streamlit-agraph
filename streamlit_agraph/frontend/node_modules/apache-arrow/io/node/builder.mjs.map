{"version":3,"sources":["io/node/builder.ts"],"names":[],"mappings":"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","file":"builder.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Duplex } from 'stream';\nimport { DataType } from '../../type';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderDuplexOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    autoDestroy?: boolean;\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughNodeStream<T extends DataType = any, TNull = any>(options: BuilderDuplexOptions<T, TNull>) {\n    return new BuilderDuplex(Builder.new(options), options);\n}\n\n/** @ignore */\ntype CB = (error?: Error | null | undefined) => void;\n\n/** @ignore */\nclass BuilderDuplex<T extends DataType = any, TNull = any> extends Duplex {\n\n    private _finished: boolean;\n    private _numChunks: number;\n    private _desiredSize: number;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(builder: Builder<T, TNull>, options: BuilderDuplexOptions<T, TNull>) {\n\n        const { queueingStrategy = 'count', autoDestroy = true } = options;\n        const { highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n\n        super({ autoDestroy, highWaterMark: 1, allowHalfOpen: true, writableObjectMode: true, readableObjectMode: true });\n\n        this._numChunks = 0;\n        this._finished = false;\n        this._builder = builder;\n        this._desiredSize = highWaterMark;\n        this._getSize = queueingStrategy !== 'bytes' ? builderLength : builderByteLength;\n    }\n    _read(size: number) {\n        this._maybeFlush(this._builder, this._desiredSize = size);\n    }\n    _final(cb?: CB) {\n        this._maybeFlush(this._builder.finish(), this._desiredSize);\n        cb && cb();\n    }\n    _write(value: any, _: string, cb?: CB) {\n        const result = this._maybeFlush(\n            this._builder.append(value),\n            this._desiredSize\n        );\n        cb && cb();\n        return result;\n    }\n    _destroy(err: Error | null, cb?: (error: Error | null) => void) {\n        this._builder.clear();\n        cb && cb(err);\n    }\n    private _maybeFlush(builder: Builder<T, TNull>, size: number) {\n        if (this._getSize(builder) >= size) {\n            ++this._numChunks && this.push(builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this.push(builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this.push(null);\n            }\n            return false;\n        }\n        return this._getSize(builder) < this.writableHighWaterMark;\n    }\n}\n\n/** @ignore */ const builderLength = <T extends DataType = any>(builder: Builder<T>) => builder.length;\n/** @ignore */ const builderByteLength = <T extends DataType = any>(builder: Builder<T>) => builder.byteLength;\n"]}