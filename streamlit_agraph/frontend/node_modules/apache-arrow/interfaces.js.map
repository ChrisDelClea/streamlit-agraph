{"version":3,"sources":["interfaces.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB;;AAGrB,iCAA8B","file":"interfaces.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Type } from './enum';\nimport * as type from './type';\nimport { DataType } from './type';\nimport * as vecs from './vector/index';\nimport * as builders from './builder/index';\nimport { BuilderOptions } from './builder/index';\n\n/** @ignore */ type FloatArray = Float32Array | Float64Array;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n/** @ignore */\nexport type TypedArray = FloatArray | IntArray | UintArray;\n/** @ignore */\nexport type BigIntArray = BigInt64Array | BigUint64Array;\n\n/** @ignore */\nexport interface TypedArrayConstructor<T extends TypedArray> {\n    readonly prototype: T;\n    new(length?: number): T;\n    new(array: Iterable<number>): T;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n    /**\n      * The size in bytes of each element in the array.\n      */\n    readonly BYTES_PER_ELEMENT: number;\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): T;\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => number, thisArg?: any): T;\n}\n\n/** @ignore */\nexport interface BigIntArrayConstructor<T extends BigIntArray> {\n    readonly prototype: T;\n    new(length?: number): T;\n    new(array: Iterable<bigint>): T;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n    /**\n      * The size in bytes of each element in the array.\n      */\n    readonly BYTES_PER_ELEMENT: number;\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: bigint[]): T;\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<bigint>, mapfn?: (v: bigint, k: number) => bigint, thisArg?: any): T;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): T;\n}\n\n/** @ignore */\nexport type VectorCtorArgs<\n    T extends VectorType<R>,\n    R extends DataType = any,\n    TArgs extends any[] = any[],\n    TCtor extends new (data: Data<R>, ...args: TArgs) => T =\n                  new (data: Data<R>, ...args: TArgs) => T\n> = TCtor extends new (data: Data<R>, ...args: infer TArgs) => T ? TArgs : never;\n\n/** @ignore */\nexport type BuilderCtorArgs<\n    T extends BuilderType<R, any>,\n    R extends DataType = any,\n    TArgs extends any[] = any[],\n    TCtor extends new (type: R, ...args: TArgs) => T =\n                  new (type: R, ...args: TArgs) => T\n> = TCtor extends new (type: R, ...args: infer TArgs) => T ? TArgs : never;\n\n/**\n * Obtain the constructor function of an instance type\n * @ignore\n */\nexport type ConstructorType<\n    T,\n    TCtor extends new (...args: any[]) => T =\n                  new (...args: any[]) => T\n> = TCtor extends new (...args: any[]) => T ? TCtor : never;\n\n/** @ignore */\nexport type VectorCtorType<\n    T extends VectorType<R>,\n    R extends DataType = any,\n    TCtor extends new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T =\n                  new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T\n> = TCtor extends new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T ? TCtor : never;\n\n/** @ignore */\nexport type BuilderCtorType<\n    T extends BuilderType<R, any>,\n    R extends DataType = any,\n    TCtor extends new (options: BuilderOptions<R, any>) => T =\n                  new (options: BuilderOptions<R, any>) => T\n> = TCtor extends new (options: BuilderOptions<R, any>) => T ? TCtor : never;\n\n/** @ignore */\nexport type VectorType<T extends Type | DataType = any> =\n    T extends Type          ? TypeToVector<T>     :\n    T extends DataType      ? DataTypeToVector<T> :\n                              vecs.BaseVector<any>\n    ;\n\n/** @ignore */\nexport type BuilderType<T extends Type | DataType = any, TNull = any> =\n    T extends Type          ? TypeToBuilder<T, TNull>     :\n    T extends DataType      ? DataTypeToBuilder<T, TNull> :\n                              builders.Builder<any, TNull>\n    ;\n\n/** @ignore */\nexport type VectorCtor<T extends Type | DataType | VectorType> =\n    T extends VectorType    ? VectorCtorType<T>                      :\n    T extends Type          ? VectorCtorType<VectorType<T>>          :\n    T extends DataType      ? VectorCtorType<VectorType<T['TType']>> :\n                              VectorCtorType<vecs.BaseVector>\n    ;\n\n/** @ignore */\nexport type BuilderCtor<T extends Type | DataType = any> =\n    T extends Type          ? BuilderCtorType<BuilderType<T>> :\n    T extends DataType      ? BuilderCtorType<BuilderType<T>> :\n                              BuilderCtorType<builders.Builder>\n    ;\n\n/** @ignore */\nexport type DataTypeCtor<T extends Type | DataType | VectorType = any> =\n    T extends DataType      ? ConstructorType<T>                 :\n    T extends VectorType    ? ConstructorType<T['type']>         :\n    T extends Type          ? ConstructorType<TypeToDataType<T>> :\n                              never\n    ;\n\n/** @ignore */\ntype TypeToVector<T extends Type> = {\n    [key: number               ]: any                             ;\n    [Type.Null                 ]: vecs.NullVector                 ;\n    [Type.Bool                 ]: vecs.BoolVector                 ;\n    [Type.Int8                 ]: vecs.Int8Vector                 ;\n    [Type.Int16                ]: vecs.Int16Vector                ;\n    [Type.Int32                ]: vecs.Int32Vector                ;\n    [Type.Int64                ]: vecs.Int64Vector                ;\n    [Type.Uint8                ]: vecs.Uint8Vector                ;\n    [Type.Uint16               ]: vecs.Uint16Vector               ;\n    [Type.Uint32               ]: vecs.Uint32Vector               ;\n    [Type.Uint64               ]: vecs.Uint64Vector               ;\n    [Type.Int                  ]: vecs.IntVector                  ;\n    [Type.Float16              ]: vecs.Float16Vector              ;\n    [Type.Float32              ]: vecs.Float32Vector              ;\n    [Type.Float64              ]: vecs.Float64Vector              ;\n    [Type.Float                ]: vecs.FloatVector                ;\n    [Type.Utf8                 ]: vecs.Utf8Vector                 ;\n    [Type.Binary               ]: vecs.BinaryVector               ;\n    [Type.FixedSizeBinary      ]: vecs.FixedSizeBinaryVector      ;\n    [Type.Date                 ]: vecs.DateVector                 ;\n    [Type.DateDay              ]: vecs.DateDayVector              ;\n    [Type.DateMillisecond      ]: vecs.DateMillisecondVector      ;\n    [Type.Timestamp            ]: vecs.TimestampVector            ;\n    [Type.TimestampSecond      ]: vecs.TimestampSecondVector      ;\n    [Type.TimestampMillisecond ]: vecs.TimestampMillisecondVector ;\n    [Type.TimestampMicrosecond ]: vecs.TimestampMicrosecondVector ;\n    [Type.TimestampNanosecond  ]: vecs.TimestampNanosecondVector  ;\n    [Type.Time                 ]: vecs.TimeVector                 ;\n    [Type.TimeSecond           ]: vecs.TimeSecondVector           ;\n    [Type.TimeMillisecond      ]: vecs.TimeMillisecondVector      ;\n    [Type.TimeMicrosecond      ]: vecs.TimeMicrosecondVector      ;\n    [Type.TimeNanosecond       ]: vecs.TimeNanosecondVector       ;\n    [Type.Decimal              ]: vecs.DecimalVector              ;\n    [Type.Union                ]: vecs.UnionVector                ;\n    [Type.DenseUnion           ]: vecs.DenseUnionVector           ;\n    [Type.SparseUnion          ]: vecs.SparseUnionVector          ;\n    [Type.Interval             ]: vecs.IntervalVector             ;\n    [Type.IntervalDayTime      ]: vecs.IntervalDayTimeVector      ;\n    [Type.IntervalYearMonth    ]: vecs.IntervalYearMonthVector    ;\n    [Type.Map                  ]: vecs.MapVector                  ;\n    [Type.List                 ]: vecs.ListVector                 ;\n    [Type.Struct               ]: vecs.StructVector               ;\n    [Type.Dictionary           ]: vecs.DictionaryVector           ;\n    [Type.FixedSizeList        ]: vecs.FixedSizeListVector        ;\n}[T];\n\n/** @ignore */\ntype DataTypeToVector<T extends DataType = any> = {\n    [key: number               ]:                                                                                                            any ;\n    [Type.Null                 ]: T extends type.Null                 ? vecs.NullVector                                     : vecs.BaseVector<T> ;\n    [Type.Bool                 ]: T extends type.Bool                 ? vecs.BoolVector                                     : vecs.BaseVector<T> ;\n    [Type.Int8                 ]: T extends type.Int8                 ? vecs.Int8Vector                                     : vecs.BaseVector<T> ;\n    [Type.Int16                ]: T extends type.Int16                ? vecs.Int16Vector                                    : vecs.BaseVector<T> ;\n    [Type.Int32                ]: T extends type.Int32                ? vecs.Int32Vector                                    : vecs.BaseVector<T> ;\n    [Type.Int64                ]: T extends type.Int64                ? vecs.Int64Vector                                    : vecs.BaseVector<T> ;\n    [Type.Uint8                ]: T extends type.Uint8                ? vecs.Uint8Vector                                    : vecs.BaseVector<T> ;\n    [Type.Uint16               ]: T extends type.Uint16               ? vecs.Uint16Vector                                   : vecs.BaseVector<T> ;\n    [Type.Uint32               ]: T extends type.Uint32               ? vecs.Uint32Vector                                   : vecs.BaseVector<T> ;\n    [Type.Uint64               ]: T extends type.Uint64               ? vecs.Uint64Vector                                   : vecs.BaseVector<T> ;\n    [Type.Int                  ]: T extends type.Int                  ? vecs.IntVector                                      : vecs.BaseVector<T> ;\n    [Type.Float16              ]: T extends type.Float16              ? vecs.Float16Vector                                  : vecs.BaseVector<T> ;\n    [Type.Float32              ]: T extends type.Float32              ? vecs.Float32Vector                                  : vecs.BaseVector<T> ;\n    [Type.Float64              ]: T extends type.Float64              ? vecs.Float64Vector                                  : vecs.BaseVector<T> ;\n    [Type.Float                ]: T extends type.Float                ? vecs.FloatVector                                    : vecs.BaseVector<T> ;\n    [Type.Utf8                 ]: T extends type.Utf8                 ? vecs.Utf8Vector                                     : vecs.BaseVector<T> ;\n    [Type.Binary               ]: T extends type.Binary               ? vecs.BinaryVector                                   : vecs.BaseVector<T> ;\n    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? vecs.FixedSizeBinaryVector                          : vecs.BaseVector<T> ;\n    [Type.Date                 ]: T extends type.Date_                ? vecs.DateVector                                     : vecs.BaseVector<T> ;\n    [Type.DateDay              ]: T extends type.DateDay              ? vecs.DateDayVector                                  : vecs.BaseVector<T> ;\n    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? vecs.DateMillisecondVector                          : vecs.BaseVector<T> ;\n    [Type.Timestamp            ]: T extends type.Timestamp            ? vecs.TimestampVector                                : vecs.BaseVector<T> ;\n    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? vecs.TimestampSecondVector                          : vecs.BaseVector<T> ;\n    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? vecs.TimestampMillisecondVector                     : vecs.BaseVector<T> ;\n    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? vecs.TimestampMicrosecondVector                     : vecs.BaseVector<T> ;\n    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? vecs.TimestampNanosecondVector                      : vecs.BaseVector<T> ;\n    [Type.Time                 ]: T extends type.Time                 ? vecs.TimeVector                                     : vecs.BaseVector<T> ;\n    [Type.TimeSecond           ]: T extends type.TimeSecond           ? vecs.TimeSecondVector                               : vecs.BaseVector<T> ;\n    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? vecs.TimeMillisecondVector                          : vecs.BaseVector<T> ;\n    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? vecs.TimeMicrosecondVector                          : vecs.BaseVector<T> ;\n    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? vecs.TimeNanosecondVector                           : vecs.BaseVector<T> ;\n    [Type.Decimal              ]: T extends type.Decimal              ? vecs.DecimalVector                                  : vecs.BaseVector<T> ;\n    [Type.Union                ]: T extends type.Union                ? vecs.UnionVector                                    : vecs.BaseVector<T> ;\n    [Type.DenseUnion           ]: T extends type.DenseUnion           ? vecs.DenseUnionVector                               : vecs.BaseVector<T> ;\n    [Type.SparseUnion          ]: T extends type.SparseUnion          ? vecs.SparseUnionVector                              : vecs.BaseVector<T> ;\n    [Type.Interval             ]: T extends type.Interval             ? vecs.IntervalVector                                 : vecs.BaseVector<T> ;\n    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? vecs.IntervalDayTimeVector                          : vecs.BaseVector<T> ;\n    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? vecs.IntervalYearMonthVector                        : vecs.BaseVector<T> ;\n    [Type.Map                  ]: T extends type.Map_                 ? vecs.MapVector<T['keyType'], T['valueType']>        : vecs.BaseVector<T> ;\n    [Type.List                 ]: T extends type.List                 ? vecs.ListVector<T['valueType']>                     : vecs.BaseVector<T> ;\n    [Type.Struct               ]: T extends type.Struct               ? vecs.StructVector<T['dataTypes']>                   : vecs.BaseVector<T> ;\n    [Type.Dictionary           ]: T extends type.Dictionary           ? vecs.DictionaryVector<T['valueType'], T['indices']> : vecs.BaseVector<T> ;\n    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? vecs.FixedSizeListVector<T['valueType']>            : vecs.BaseVector<T> ;\n}[T['TType']];\n\n/** @ignore */\nexport type TypeToDataType<T extends Type> = {\n    [key: number               ]: type.DataType             ;\n    [Type.Null                 ]: type.Null                 ;\n    [Type.Bool                 ]: type.Bool                 ;\n    [Type.Int                  ]: type.Int                  ;\n    [Type.Int16                ]: type.Int16                ;\n    [Type.Int32                ]: type.Int32                ;\n    [Type.Int64                ]: type.Int64                ;\n    [Type.Uint8                ]: type.Uint8                ;\n    [Type.Uint16               ]: type.Uint16               ;\n    [Type.Uint32               ]: type.Uint32               ;\n    [Type.Uint64               ]: type.Uint64               ;\n    [Type.Int8                 ]: type.Int8                 ;\n    [Type.Float16              ]: type.Float16              ;\n    [Type.Float32              ]: type.Float32              ;\n    [Type.Float64              ]: type.Float64              ;\n    [Type.Float                ]: type.Float                ;\n    [Type.Utf8                 ]: type.Utf8                 ;\n    [Type.Binary               ]: type.Binary               ;\n    [Type.FixedSizeBinary      ]: type.FixedSizeBinary      ;\n    [Type.Date                 ]: type.Date_                ;\n    [Type.DateDay              ]: type.DateDay              ;\n    [Type.DateMillisecond      ]: type.DateMillisecond      ;\n    [Type.Timestamp            ]: type.Timestamp            ;\n    [Type.TimestampSecond      ]: type.TimestampSecond      ;\n    [Type.TimestampMillisecond ]: type.TimestampMillisecond ;\n    [Type.TimestampMicrosecond ]: type.TimestampMicrosecond ;\n    [Type.TimestampNanosecond  ]: type.TimestampNanosecond  ;\n    [Type.Time                 ]: type.Time                 ;\n    [Type.TimeSecond           ]: type.TimeSecond           ;\n    [Type.TimeMillisecond      ]: type.TimeMillisecond      ;\n    [Type.TimeMicrosecond      ]: type.TimeMicrosecond      ;\n    [Type.TimeNanosecond       ]: type.TimeNanosecond       ;\n    [Type.Decimal              ]: type.Decimal              ;\n    [Type.Union                ]: type.Union                ;\n    [Type.DenseUnion           ]: type.DenseUnion           ;\n    [Type.SparseUnion          ]: type.SparseUnion          ;\n    [Type.Interval             ]: type.Interval             ;\n    [Type.IntervalDayTime      ]: type.IntervalDayTime      ;\n    [Type.IntervalYearMonth    ]: type.IntervalYearMonth    ;\n    [Type.Map                  ]: type.Map_                 ;\n    [Type.List                 ]: type.List                 ;\n    [Type.Struct               ]: type.Struct               ;\n    [Type.Dictionary           ]: type.Dictionary           ;\n    [Type.FixedSizeList        ]: type.FixedSizeList        ;\n}[T];\n\n/** @ignore */\ntype TypeToBuilder<T extends Type = any, TNull = any> = {\n    [key: number               ]: builders.Builder                            ;\n    [Type.Null                 ]: builders.NullBuilder<TNull>                 ;\n    [Type.Bool                 ]: builders.BoolBuilder<TNull>                 ;\n    [Type.Int8                 ]: builders.Int8Builder<TNull>                 ;\n    [Type.Int16                ]: builders.Int16Builder<TNull>                ;\n    [Type.Int32                ]: builders.Int32Builder<TNull>                ;\n    [Type.Int64                ]: builders.Int64Builder<TNull>                ;\n    [Type.Uint8                ]: builders.Uint8Builder<TNull>                ;\n    [Type.Uint16               ]: builders.Uint16Builder<TNull>               ;\n    [Type.Uint32               ]: builders.Uint32Builder<TNull>               ;\n    [Type.Uint64               ]: builders.Uint64Builder<TNull>               ;\n    [Type.Int                  ]: builders.IntBuilder<any, TNull>             ;\n    [Type.Float16              ]: builders.Float16Builder<TNull>              ;\n    [Type.Float32              ]: builders.Float32Builder<TNull>              ;\n    [Type.Float64              ]: builders.Float64Builder<TNull>              ;\n    [Type.Float                ]: builders.FloatBuilder<any, TNull>           ;\n    [Type.Utf8                 ]: builders.Utf8Builder<TNull>                 ;\n    [Type.Binary               ]: builders.BinaryBuilder<TNull>               ;\n    [Type.FixedSizeBinary      ]: builders.FixedSizeBinaryBuilder<TNull>      ;\n    [Type.Date                 ]: builders.DateBuilder<any, TNull>            ;\n    [Type.DateDay              ]: builders.DateDayBuilder<TNull>              ;\n    [Type.DateMillisecond      ]: builders.DateMillisecondBuilder<TNull>      ;\n    [Type.Timestamp            ]: builders.TimestampBuilder<any, TNull>       ;\n    [Type.TimestampSecond      ]: builders.TimestampSecondBuilder<TNull>      ;\n    [Type.TimestampMillisecond ]: builders.TimestampMillisecondBuilder<TNull> ;\n    [Type.TimestampMicrosecond ]: builders.TimestampMicrosecondBuilder<TNull> ;\n    [Type.TimestampNanosecond  ]: builders.TimestampNanosecondBuilder<TNull>  ;\n    [Type.Time                 ]: builders.TimeBuilder<any, TNull>            ;\n    [Type.TimeSecond           ]: builders.TimeSecondBuilder<TNull>           ;\n    [Type.TimeMillisecond      ]: builders.TimeMillisecondBuilder<TNull>      ;\n    [Type.TimeMicrosecond      ]: builders.TimeMicrosecondBuilder<TNull>      ;\n    [Type.TimeNanosecond       ]: builders.TimeNanosecondBuilder<TNull>       ;\n    [Type.Decimal              ]: builders.DecimalBuilder<TNull>              ;\n    [Type.Union                ]: builders.UnionBuilder<any, TNull>           ;\n    [Type.DenseUnion           ]: builders.DenseUnionBuilder<any, TNull>      ;\n    [Type.SparseUnion          ]: builders.SparseUnionBuilder<any, TNull>     ;\n    [Type.Interval             ]: builders.IntervalBuilder<any, TNull>        ;\n    [Type.IntervalDayTime      ]: builders.IntervalDayTimeBuilder<TNull>      ;\n    [Type.IntervalYearMonth    ]: builders.IntervalYearMonthBuilder<TNull>    ;\n    [Type.Map                  ]: builders.MapBuilder<any, any, TNull>        ;\n    [Type.List                 ]: builders.ListBuilder<any, TNull>            ;\n    [Type.Struct               ]: builders.StructBuilder<any, TNull>          ;\n    [Type.Dictionary           ]: builders.DictionaryBuilder<any, TNull>      ;\n    [Type.FixedSizeList        ]: builders.FixedSizeListBuilder<any, TNull>   ;\n}[T];\n\n/** @ignore */\ntype DataTypeToBuilder<T extends DataType = any, TNull = any> = {\n    [key: number               ]:                                                                                                  builders.Builder<any, TNull> ;\n    [Type.Null                 ]: T extends type.Null                 ? builders.NullBuilder<TNull>                              : builders.Builder<any, TNull> ;\n    [Type.Bool                 ]: T extends type.Bool                 ? builders.BoolBuilder<TNull>                              : builders.Builder<any, TNull> ;\n    [Type.Int8                 ]: T extends type.Int8                 ? builders.Int8Builder<TNull>                              : builders.Builder<any, TNull> ;\n    [Type.Int16                ]: T extends type.Int16                ? builders.Int16Builder<TNull>                             : builders.Builder<any, TNull> ;\n    [Type.Int32                ]: T extends type.Int32                ? builders.Int32Builder<TNull>                             : builders.Builder<any, TNull> ;\n    [Type.Int64                ]: T extends type.Int64                ? builders.Int64Builder<TNull>                             : builders.Builder<any, TNull> ;\n    [Type.Uint8                ]: T extends type.Uint8                ? builders.Uint8Builder<TNull>                             : builders.Builder<any, TNull> ;\n    [Type.Uint16               ]: T extends type.Uint16               ? builders.Uint16Builder<TNull>                            : builders.Builder<any, TNull> ;\n    [Type.Uint32               ]: T extends type.Uint32               ? builders.Uint32Builder<TNull>                            : builders.Builder<any, TNull> ;\n    [Type.Uint64               ]: T extends type.Uint64               ? builders.Uint64Builder<TNull>                            : builders.Builder<any, TNull> ;\n    [Type.Int                  ]: T extends type.Int                  ? builders.IntBuilder<T, TNull>                            : builders.Builder<any, TNull> ;\n    [Type.Float16              ]: T extends type.Float16              ? builders.Float16Builder<TNull>                           : builders.Builder<any, TNull> ;\n    [Type.Float32              ]: T extends type.Float32              ? builders.Float32Builder<TNull>                           : builders.Builder<any, TNull> ;\n    [Type.Float64              ]: T extends type.Float64              ? builders.Float64Builder<TNull>                           : builders.Builder<any, TNull> ;\n    [Type.Float                ]: T extends type.Float                ? builders.FloatBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n    [Type.Utf8                 ]: T extends type.Utf8                 ? builders.Utf8Builder<TNull>                              : builders.Builder<any, TNull> ;\n    [Type.Binary               ]: T extends type.Binary               ? builders.BinaryBuilder<TNull>                            : builders.Builder<any, TNull> ;\n    [Type.FixedSizeBinary      ]: T extends type.FixedSizeBinary      ? builders.FixedSizeBinaryBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.Date                 ]: T extends type.Date_                ? builders.DateBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n    [Type.DateDay              ]: T extends type.DateDay              ? builders.DateDayBuilder<TNull>                           : builders.Builder<any, TNull> ;\n    [Type.DateMillisecond      ]: T extends type.DateMillisecond      ? builders.DateMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.Timestamp            ]: T extends type.Timestamp            ? builders.TimestampBuilder<T, TNull>                      : builders.Builder<any, TNull> ;\n    [Type.TimestampSecond      ]: T extends type.TimestampSecond      ? builders.TimestampSecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.TimestampMillisecond ]: T extends type.TimestampMillisecond ? builders.TimestampMillisecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n    [Type.TimestampMicrosecond ]: T extends type.TimestampMicrosecond ? builders.TimestampMicrosecondBuilder<TNull>              : builders.Builder<any, TNull> ;\n    [Type.TimestampNanosecond  ]: T extends type.TimestampNanosecond  ? builders.TimestampNanosecondBuilder<TNull>               : builders.Builder<any, TNull> ;\n    [Type.Time                 ]: T extends type.Time                 ? builders.TimeBuilder<T, TNull>                           : builders.Builder<any, TNull> ;\n    [Type.TimeSecond           ]: T extends type.TimeSecond           ? builders.TimeSecondBuilder<TNull>                        : builders.Builder<any, TNull> ;\n    [Type.TimeMillisecond      ]: T extends type.TimeMillisecond      ? builders.TimeMillisecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.TimeMicrosecond      ]: T extends type.TimeMicrosecond      ? builders.TimeMicrosecondBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.TimeNanosecond       ]: T extends type.TimeNanosecond       ? builders.TimeNanosecondBuilder<TNull>                    : builders.Builder<any, TNull> ;\n    [Type.Decimal              ]: T extends type.Decimal              ? builders.DecimalBuilder<TNull>                           : builders.Builder<any, TNull> ;\n    [Type.Union                ]: T extends type.Union                ? builders.UnionBuilder<T, TNull>                          : builders.Builder<any, TNull> ;\n    [Type.DenseUnion           ]: T extends type.DenseUnion           ? builders.DenseUnionBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n    [Type.SparseUnion          ]: T extends type.SparseUnion          ? builders.SparseUnionBuilder<T, TNull>                    : builders.Builder<any, TNull> ;\n    [Type.Interval             ]: T extends type.Interval             ? builders.IntervalBuilder<T, TNull>                       : builders.Builder<any, TNull> ;\n    [Type.IntervalDayTime      ]: T extends type.IntervalDayTime      ? builders.IntervalDayTimeBuilder<TNull>                   : builders.Builder<any, TNull> ;\n    [Type.IntervalYearMonth    ]: T extends type.IntervalYearMonth    ? builders.IntervalYearMonthBuilder<TNull>                 : builders.Builder<any, TNull> ;\n    [Type.Map                  ]: T extends type.Map_                 ? builders.MapBuilder<T['keyType'], T['valueType'], TNull> : builders.Builder<any, TNull> ;\n    [Type.List                 ]: T extends type.List                 ? builders.ListBuilder<T['valueType'], TNull>              : builders.Builder<any, TNull> ;\n    [Type.Struct               ]: T extends type.Struct               ? builders.StructBuilder<T['dataTypes'], TNull>            : builders.Builder<any, TNull> ;\n    [Type.Dictionary           ]: T extends type.Dictionary           ? builders.DictionaryBuilder<T, TNull>                     : builders.Builder<any, TNull> ;\n    [Type.FixedSizeList        ]: T extends type.FixedSizeList        ? builders.FixedSizeListBuilder<T['valueType'], TNull>     : builders.Builder<any, TNull> ;\n}[T['TType']];\n"]}